let GLOBAL: i32 = 5;

extern fn putchar(c: i8) -> i32;
extern fn puts(c: [i8]) -> i32;
extern fn malloc(c: i64) -> [i8];
extern fn calloc(c: i64, s: i64) -> [i8];
extern fn realloc(ptr: [i8], c: i64) -> [i8];
extern fn memcpy(dest: [i8], src: [i8], len: i64);
extern fn free(ptr: [i8]);
extern fn memset(ptr: [i8], value: i8, num: i64);
extern fn printf(fmt: [u8], num: i32) -> i32;

fn main(argc: i32) -> i64 {
    let x: i64 = test(calloc(256, 1), 256, 128, 0, 0);
    printf("x: %lli\n", x);
    return 0;
}

fn test(tape: [i8], tapelen: i64, index: i64, state: i64, steps: i64) -> i64 {
    printf("tape: %p\n", tape);
    printf("tapelen: %lli\n", tapelen);
    printf("index: %lli\n", index);
    printf("state: %lli\n", state);
    printf("steps: %lli\n", steps);

    if (index < 0) {
        let base: i64 = tapelen;
        tapelen = tapelen * 2;
        tape = realloc(tape, tapelen);
        memcpy(tape + base, tape, base);
        memset(tape, 0, base);
        index = index + base;
    }

    if (index == tapelen) {
        let base: i64 = tapelen;
        tapelen = tapelen * 2;
        tape = realloc(tape, tapelen);
        memset(tape + base, 0, base);
    }

    printf("VAL: %lli\n", tape[index] as i64);
    printf("VALx: %lli\n", (tape[index] == 0) as i64);

    if (state == 0) {
        if (tape[index]) {
            tape[index] = 1;
            return test(tape, tapelen, index - 1, 1, steps + 1);
        } else {
            tape[index] = 1;
            return test(tape, tapelen, index + 1, 1, steps + 1);
        }
    } else {
        if (state == 1) {
            if (tape[index]) {
                tape[index] = 0;
                return test(tape, tapelen, index - 1, 2, steps + 1);
            } else {
                tape[index] = 1;
                return test(tape, tapelen, index - 1, 0, steps + 1);
            }
        } else {
            if (state == 2) {
                if (tape[index]) {
                    tape[index] = 1;
                    return test(tape, tapelen, index - 1, 3, steps + 1);
                } else {
                    tape[index] = 1;
                    return steps + 1;
                }
            } else {
                if (state == 3) {
                    if (tape[index]) {
                        tape[index] = 0;
                        return test(tape, tapelen, index + 1, 0, steps + 1);
                    } else {
                        tape[index] = 1;
                        return test(tape, tapelen, index + 1, 3, steps + 1);
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
